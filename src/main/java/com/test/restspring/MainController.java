package com.test.restspring;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.web.bind.annotation.*;


@RefreshScope
@RestController    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    //private userServiceImpl userservice = new userServiceImpl(userRepository);


    @GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String age) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setAge(age);
        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping("/{name}")
    //@ResponseBody
    public Iterable<User> getPerson(@PathVariable String name) {
        //return "helloWorld";
        //User u;
        Iterable<User> u = userRepository.findByName(name);
        return u;
    }

    @Value("${city:Hello default}")
    private String city;
    @RequestMapping("/city")
    String getMessage() { return this.city; }

    @GetMapping("/getlogger")
    public void testLoger(){
        ////日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出。
        Logger logger = LoggerFactory.getLogger(this.getClass());
        logger.trace("This is a trace");
        logger.debug("This is a debug");
        logger.info("This is a info");
        logger.warn("This is a warn");
        logger.error("This is a error");
    }

}
